<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web3 on Galette Cidre CTF</title>
    <link>https://gcc-ensibs.fr/tags/web3/</link>
    <description>Recent content in Web3 on Galette Cidre CTF</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 19 Jan 2024 14:30:09 +0100</lastBuildDate>
    <atom:link href="https://gcc-ensibs.fr/tags/web3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Confidentiality HTB Business 2023</title>
      <link>https://gcc-ensibs.fr/posts/klm-confidentiality/</link>
      <pubDate>Fri, 19 Jan 2024 14:30:09 +0100</pubDate>
      <guid>https://gcc-ensibs.fr/posts/klm-confidentiality/</guid>
      <description>Details : First of all, the contract relays on a signature check to mint an erc721 token.&#xA;After a little bit of researches, we can see the use of ecrecover(hash,v,r,s) which is vulnerable to signature maleability. I did a bit of research and here is what we need to ensure our exploit works correctly.&#xA;Goal : Our goal is to trick the following function :&#xA;function safeMintWithSignature(bytes memory signature, address to) external returns (uint256) { require(_verifySignature(signature), &amp;#34;Not approved&amp;#34;); require(!</description>
    </item>
  </channel>
</rss>
